% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/video_batch_convert.R
\name{video_batch_convert}
\alias{video_batch_convert}
\title{Batch process and convert multiple video files to a common output format}
\usage{
video_batch_convert(
  x,
  make_portable = T,
  cut_codec = T,
  codec_regexpr = "[:digit:]{1,}p_",
  hashtag_rm = T,
  fps_reduce_to = NULL,
  width_reduce_to = NULL,
  height_reduce_to = NULL,
  video_to_video_args = list()
)
}
\arguments{
\item{x}{dir with video files only, or vector of paths to video files}

\item{make_portable}{make filenames portable with brathering::make_portable_filename;
this will rename the originals}

\item{cut_codec}{cut names at codec info, everything behind is discarded;
this will rename the originals}

\item{codec_regexpr}{regular expression where to cut filenames}

\item{hashtag_rm}{remove hashtags from filenames? all letters except spaces
after a # are removed}

\item{fps_reduce_to}{integer fps to reduce to; adds fps_sample and
fps_out to video_to_video_args; video with lower fps are not altered}

\item{width_reduce_to}{integer video width to reduce to; adds scale argument
to video_to_video_args; lower video widths remain; if height_reduce_to is
NULL, heights are scaled proportionally to maintain aspect ratio}

\item{height_reduce_to}{analogue to width_reduce_to}

\item{video_to_video_args}{arguments to video_to_video}
}
\value{
nothing
}
\description{
Originally intended to batch convert youtube video files. Rather made
to reduce (harmonize) fps, width and/or height.
}
\examples{
\dontrun{
x <- "~/Downloads/yt_vid"
# convert all by common codec but keep fps and resolution
video_batch_convert(x = x)
# just remove audio
video_batch_convert(x = x, video_to_video_args = list(audio_rm = T))
# reduce fps and width
video_batch_convert(x = x, fps_reduce_to = 10, width_reduce_to = 400)
# reduce quality and harmonize audio, also use other fmpeg version
video_batch_convert(x = x, video_to_video_args = list(out_path = "~/Downloads/yt_vid3",
                                                      ffmpeg_flags = "-crf 28 -c:a aac -b:a 128k",
                                                      which_ffmpeg = "ffmpeg7"))
# Example (for 1080p30 H.264):
# CRF 18: ~15–20 Mbps (visually lossless)
# CRF 23: ~8–10 Mbps
# CRF 28: ~4 Mbps
# test conversion with first 10 sec only
video_batch_convert(x = x,
                    fps_reduce_to = 25,
                    width_reduce_to = 576,
                    video_to_video_args = list(out_path = "~/Downloads/yt_vid2",
                                               ffmpeg_flags = "-crf 28 -c:a aac -b:a 128k -t 10",
                                               which_ffmpeg = "ffmpeg7"))
# rough CRF matches
#     | libx264 CRF | ≈ libx265 CRF |
#     | ----------- | ------------- |
#     | 18          | 20–21         |
#     | 20          | 22–23         |
#     | 23          | 26–28         |
#     | 25          | 28–30         |

# change folder names first
vids <- list.files("/Users/chris/Downloads/yt", recursive = T, full.names = T)
new_paths <- gsub("\\\\S*#\\\\S*\\\\s?", "", dirname(vids)) # rm hashtags
new_paths <- make_portable_filepath(new_paths)
file.rename(dirname(vids), new_paths)

}
}
